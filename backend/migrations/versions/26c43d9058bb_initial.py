"""initial

Revision ID: 26c43d9058bb
Revises: 
Create Date: 2025-04-12 16:28:59.139492

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '26c43d9058bb'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('asientos', sa.Column('estado', sa.String(), server_default='disponible', nullable=True))
    op.add_column('asientos', sa.Column('creado_en', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True))
    op.add_column('asientos', sa.Column('actualizado_en', sa.TIMESTAMP(), nullable=True))
    op.create_unique_constraint('uq_asiento_sala_fila_numero', 'asientos', ['sala_id', 'fila', 'numero'])
    op.drop_column('asientos', 'estado_configuracion')
    op.drop_column('asientos', 'estado_venta')
    
    # Agregar columnas de boletos
    op.add_column('boletos', sa.Column('codigo_qr', sa.String(), nullable=True))
    op.add_column('boletos', sa.Column('actualizado_en', sa.TIMESTAMP(), nullable=True))
    op.add_column('boletos', sa.Column('vendedor_id', sa.Integer(), nullable=True))
    op.execute("UPDATE boletos SET vendedor_id = usuario_id WHERE vendedor_id IS NULL")
    op.alter_column('boletos', 'vendedor_id',
               existing_type=sa.Integer(),
               nullable=False)
    op.create_foreign_key(None, 'boletos', 'usuarios', ['vendedor_id'], ['id'])
    
    # Agregar columnas de salas como nullable primero
    op.add_column('salas', sa.Column('num_filas', sa.Integer(), nullable=True))
    op.add_column('salas', sa.Column('asientos_por_fila', sa.Integer(), nullable=True))
    op.add_column('salas', sa.Column('activa', sa.Boolean(), server_default='true', nullable=False))
    op.add_column('salas', sa.Column('creada_en', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True))
    op.add_column('salas', sa.Column('actualizada_en', sa.TIMESTAMP(), nullable=True))
    
    # Actualizar registros existentes con valores por defecto
    op.execute("UPDATE salas SET num_filas = 5 WHERE num_filas IS NULL")
    op.execute("UPDATE salas SET asientos_por_fila = 10 WHERE asientos_por_fila IS NULL")
    
    # Hacer las columnas NOT NULL
    op.alter_column('salas', 'num_filas',
               existing_type=sa.Integer(),
               nullable=False)
    op.alter_column('salas', 'asientos_por_fila',
               existing_type=sa.Integer(),
               nullable=False)
    
    op.alter_column('salas', 'tipo',
               existing_type=sa.VARCHAR(),
               server_default='2D',
               existing_nullable=False)
    op.alter_column('usuarios', 'creado_en',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('now()'),
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'boletos', type_='foreignkey')
    op.drop_column('boletos', 'vendedor_id')
    op.drop_column('boletos', 'actualizado_en')
    op.drop_column('boletos', 'codigo_qr')
    op.drop_constraint('uq_asiento_sala_fila_numero', 'asientos', type_='unique')
    op.add_column('asientos', sa.Column('estado_venta', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('asientos', sa.Column('estado_configuracion', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_column('asientos', 'actualizado_en')
    op.drop_column('asientos', 'creado_en')
    op.drop_column('asientos', 'estado')
    op.drop_column('salas', 'actualizada_en')
    op.drop_column('salas', 'creada_en')
    op.drop_column('salas', 'asientos_por_fila')
    op.drop_column('salas', 'num_filas')
    op.drop_column('salas', 'activa')
    op.alter_column('usuarios', 'creado_en',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('salas', 'tipo',
               existing_type=sa.VARCHAR(),
               server_default=sa.text("'2D'::character varying"),
               existing_nullable=False)
    # ### end Alembic commands ###
